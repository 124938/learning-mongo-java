package com.shrey.mongo.learning.dal;

import com.fasterxml.jackson.core.type.TypeReference;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Projections;

import com.mongodb.client.model.Updates;
import com.mongodb.client.result.UpdateResult;
import com.shrey.mongo.learning.document.Address;
import com.shrey.mongo.learning.document.Comment;
import com.shrey.mongo.learning.document.Employee;
import com.shrey.mongo.learning.document.Job;
import com.shrey.mongo.learning.util.JsonUtils;

import lombok.extern.slf4j.Slf4j;

import org.bson.Document;
import org.bson.conversions.Bson;
import org.bson.types.ObjectId;

import java.util.List;
import java.util.function.Consumer;

@Slf4j
public class EmployeeDal {

    private final MongoClient mongoClient;
    private final MongoDatabase mongoDatabase;
    private final MongoCollection<Document> mongoCollection;

    public EmployeeDal(final String hostUri, final String databaseName, final String collection) {
        this.mongoClient = MongoClients.create(hostUri);
        this.mongoDatabase = mongoClient.getDatabase(databaseName);
        this.mongoCollection = mongoDatabase.getCollection(collection);
        this.listCollection();
    }

    private void listCollection() {
        log.info("=== List collection - start ===");

        // Fetch all collections
        this.mongoDatabase
                .listCollectionNames()
                .forEach((Consumer<String>) collection -> log.info(collection));
        log.info("=== List collection - end ===");
    }

    public void list() {
        log.info("=== List employee records - start ===");

        // Execute find query
        this.mongoCollection
                .find()
                .forEach((Consumer<Document>) record -> log.info(record.toJson()));
        log.info("=== List records records - end ===");
    }

    public String create(final Employee employee) {
        log.info("=== Creating employee - start ===");
        try {
            // Create document by converting object to JSON
            Document employeeDocument = new Document(Document.parse(JsonUtils.serialize(employee)));

            // Insert record
            this.mongoCollection
                    .insertOne(employeeDocument);

            // Fetch unique id generated by mongo API
            return employeeDocument
                    .getObjectId("_id")
                    .toString();
        } catch (final Exception e) {
            throw new RuntimeException("Unable to insert record into collection", e);
        } finally {
            log.info("=== Creating employee - end ===");
        }
    }

    public void updateAddress(final String id, final Address address) {
        log.info("=== Update address of employee - start ===");

        // Prepare filter
        Bson filter = Filters.eq("_id", new ObjectId(id));

        // Push element into array
        Document addressDocument = new Document(Document.parse(JsonUtils.serialize(address)));
        Bson updates = Updates.set("address", addressDocument);

        // Execute update query
        UpdateResult updateResult = this.mongoCollection.updateOne(filter, updates);
        log.info(updateResult.toString());

        log.info("=== Update address of employee - end ===");
    }

    public Employee fetchById(final String id) {
        log.info("=== Fetch employee by id - start ===");
        try {
            // Execute query based on id
            Document document = this.mongoCollection
                    .find(Filters.eq("_id", new ObjectId(id)))
                    .first();

            if (document != null) {
                return JsonUtils
                        .deserialize(document.toJson(), new TypeReference<Employee>() {});
            } else {
                throw new RuntimeException("document id -> " + id+ " does not exist");
            }
        } catch (final Exception e) {
            throw new RuntimeException("Unable to find document for id -> " + id, e);
        } finally {
            log.info("=== Fetch employee by id - end ===");
        }
    }

    public List<Job> fetchJobsById(final String id) {
        log.info("=== Fetch employee jobs by id - start ===");
        try {
            // Execute query based on id
            Document document = this.mongoCollection
                    .find(Filters.eq("_id", new ObjectId(id)))
                    .projection(Projections.include("jobs"))
                    .first();

            if (document != null) {
                return JsonUtils
                        .deserialize(document.toJson(), new TypeReference<Employee>() {})
                        .getJobs();
            } else {
                throw new RuntimeException("document id -> " + id+ " does not exist");
            }
        } catch (final Exception e) {
            throw new RuntimeException("Unable to find document for id -> " + id, e);
        } finally {
            log.info("=== Fetch employee jobs by id - end ===");
        }
    }

    public void updateJobByIdAndCompany(final String id, final Job updatedJob) {
        log.info("=== Update employee job by id + company - start ===");

        // Prepare filter
        Bson filter = Filters.and(
                Filters.eq("_id", new ObjectId(id)),
                Filters.eq("jobs.company", updatedJob.getCompany())
        );

        // Prepare updates
        Bson updates = Updates.combine(
                Updates.set("jobs.$.start", updatedJob.getStart()),
                Updates.set("jobs.$.end", updatedJob.getEnd())
        );

        // Execute update query
        UpdateResult updateResult = this.mongoCollection.updateOne(filter, updates);
        log.info(updateResult.toString());

        log.info("=== Update employee job by id + company - start ===");
    }

    public void updateCommentsById(final String id, final Comment comment) {
        log.info("=== Push employee comment - start ===");

        // Prepare filter
        Bson filter = Filters.eq("_id", new ObjectId(id));

        // Push element into array
        Document commentDocument = new Document(Document.parse(JsonUtils.serialize(comment)));
        Bson updates = Updates.push("comments", commentDocument);

        // Execute update query
        UpdateResult updateResult = this.mongoCollection.updateOne(filter, updates);
        log.info(updateResult.toString());

        log.info("=== Push employee comment - end ===");
    }
}